{"version":3,"sources":["hoc/withAuthRedirect.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Messages/MessageItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogItem","className","s","dialog","id","name","Message","message","maxLength50","maxLengthCreator","DialogFormReducer","reduxForm","form","handleSubmit","onSubmit","Field","placeholder","component","TextArea","validate","requiredField","Dialogs","messagesPage","sendMessage","dialogs","messages","dialogsElements","map","messagesElements","dialogsItem","dataForm","text","compose","dispatch","newMessageBody","addMessage"],"mappings":"wOAIMA,EAA6B,SAAAC,GAAK,MAAK,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAAAC,GAAc,IACpCC,EADmC,4JAGrC,WACQ,OAAKC,KAAKC,MAAMN,OAGT,cAACG,EAAD,eAAeE,KAAKC,QAFhB,cAAC,IAAD,CAAUC,GAAG,eALK,GACTC,IAAML,WAatC,OAFiCM,YAAQX,EAARW,CAAoCL,K,oBCnBzEM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,6JCWlMC,EARI,SAACN,GAChB,OACI,qBAAKO,UAAWC,IAAEC,OAAlB,SACI,cAAC,IAAD,CAASR,GAAE,mBAAcD,EAAMU,IAA/B,SAAsCV,EAAMW,UCMzCC,EATC,SAAAZ,GAEZ,OACI,qBAAKO,UAAWC,IAAEK,QAAlB,SACKb,EAAMa,WCkCbC,EAAcC,YAAiB,IAgB/BC,EAAoBC,YAAU,CAClCC,KAAM,UADkBD,EAdP,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aACpB,OACE,uBAAMC,SAAUD,EAAhB,UACE,cAACE,EAAA,EAAD,CACEC,YAAY,qBACZX,KAAK,OACLY,UAAWC,IACXC,SAAU,CAACC,IAAeZ,KAE5B,uDASSa,EAlDC,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,YAAanC,EAAa,EAAbA,OACpCoC,EAAsBF,EAAtBE,QAASC,EAAaH,EAAbG,SACbC,EAAkBF,EAAQG,KAAI,SAACxB,GAAD,OAChC,cAAC,EAAD,CAAYE,KAAMF,EAAOE,KAAMD,GAAID,EAAOC,IAASD,EAAOC,OAGxDwB,EAAmBH,EAASE,KAAI,SAACpB,GAAD,OAClC,cAAC,EAAD,CAASA,QAASA,EAAQA,QAASH,GAAIG,EAAQH,IAASG,EAAQH,OAOlE,OAAKhB,EAKH,sBAAKa,UAAWC,IAAEsB,QAAlB,UACE,qBAAKvB,UAAWC,IAAE2B,YAAlB,SAAgCH,IAEhC,qBAAKzB,UAAWC,IAAEuB,SAAlB,SAA6BG,IAC7B,8BACE,cAAClB,EAAD,CAAmBI,SAdR,SAACgB,GAChBP,EAAYO,EAASC,cAId,cAAC,IAAD,CAAUpC,GAAG,YCLTqC,sBACbnC,aAfsB,SAACV,GACvB,MAAO,CACLmC,aAAcnC,EAAMmC,iBAIG,SAACW,GAC1B,MAAO,CACLV,YAAa,SAACW,GACZD,EAASE,YAAWD,SAOxB5C,IAFa0C,CAGbX","file":"static/js/4.e1c1e6a7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nconst mapStateToPropsForRedirect = state => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = Component => {\r\n    class RedirectComponent extends React.Component {\r\n\r\n        render() {\r\n                if (!this.props.isAuth) {\r\n                    return <Redirect to='/login' />\r\n                }\r\n                return <Component {...this.props} />\r\n            }\r\n    }\r\n\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1AuRv\",\"dialog\":\"Dialogs_dialog__L4tWv\",\"dialogsItem\":\"Dialogs_dialogsItem__1mXR_\",\"active\":\"Dialogs_active__3ZUQz\",\"messages\":\"Dialogs_messages__3AtNP\",\"message\":\"Dialogs_message__2N2GE\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from '../Dialogs.module.css';\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\n\r\n\r\nconst Message = props => {\r\n\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","import React from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport {\r\n  maxLengthCreator,\r\n  requiredField,\r\n} from '../../utils/validators/validators';\r\nimport { TextArea } from '../common/DormControls/FormControls';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport Message from './Messages/MessageItem';\r\n\r\nconst Dialogs = ({ messagesPage, sendMessage, isAuth }) => {\r\n  const { dialogs, messages } = messagesPage;\r\n  let dialogsElements = dialogs.map((dialog) => (\r\n    <DialogItem name={dialog.name} id={dialog.id} key={dialog.id} />\r\n  ));\r\n\r\n  let messagesElements = messages.map((message) => (\r\n    <Message message={message.message} id={message.id} key={message.id} />\r\n  ));\r\n\r\n  const onSubmit = (dataForm) => {\r\n    sendMessage(dataForm.text);\r\n  };\r\n\r\n  if (!isAuth) {\r\n    return <Redirect to=\"/login\" />;\r\n  }\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItem}>{dialogsElements}</div>\r\n\r\n      <div className={s.messages}>{messagesElements}</div>\r\n      <div>\r\n        <DialogFormReducer onSubmit={onSubmit} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst DialogForm = ({ handleSubmit }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Field\r\n        placeholder=\"Enter your message\"\r\n        name=\"text\"\r\n        component={TextArea}\r\n        validate={[requiredField, maxLength50]}\r\n      />\r\n      <button>Add message</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst DialogFormReducer = reduxForm({\r\n  form: 'dialog',\r\n})(DialogForm);\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { addMessage } from '../../redux/dialogsReducer';\r\nimport Dialogs from './Dialogs';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    messagesPage: state.messagesPage,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(addMessage(newMessageBody));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}